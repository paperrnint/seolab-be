name: Deploy to AWS EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Create application.yml
      run: |
        mkdir -p src/main/resources
        cat > src/main/resources/application.yml << EOF
        spring:
          application:
            name: seolab-be

          datasource:
            url: jdbc:mysql://localhost:3306/seolab_schema?serverTimezone=Asia/Seoul
            username: seolab
            password: ${{ secrets.DB_PASSWORD }}
            driver-class-name: com.mysql.cj.jdbc.Driver

          jpa:
            hibernate:
              ddl-auto: validate
            properties:
              hibernate:
                format_sql: true
                show_sql: false
            database-platform: org.hibernate.dialect.MySQL8Dialect

          data:
            redis:
              host: localhost
              port: 6379
              timeout: 2000ms

          mail:
            host: smtp.gmail.com
            port: 587
            username: ${{ secrets.EMAIL_USERNAME }}
            password: ${{ secrets.EMAIL_PASSWORD }}
            properties:
              mail:
                smtp:
                  auth: true
                  starttls:
                    enable: true
                    required: true
                mime:
                  charset: UTF-8

        jwt:
          secret: ${{ secrets.JWT_SECRET }}
          access-token-validity: 900000
          refresh-token-validity: 604800000

        kakao:
          api:
            key: ${{ secrets.KAKAO_API_KEY }}
            book-search-url: https://dapi.kakao.com/v3/search/book

        email:
          verification:
            expiration: 300
            code-length: 6

        server:
          port: 8080

        management:
          endpoints:
            web:
              exposure:
                include: health
              base-path: /actuator
          endpoint:
            health:
              show-details: always
        EOF

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    - name: Get JAR filename
      id: jar
      run: |
        JAR_FILE=$(ls build/libs/*.jar | grep -v 'plain' | head -n 1)
        echo "file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "name=$(basename $JAR_FILE)" >> $GITHUB_OUTPUT

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOST: ${{ secrets.EC2_HOST }}
        USER: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} '
          mkdir -p ~/app
        '
        
        scp -o StrictHostKeyChecking=no -i private_key.pem \
          ${{ steps.jar.outputs.file }} \
          ${USER}@${HOST}:~/app/application.jar
        
        ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER}@${HOST} '
          sudo systemctl restart seolab
          
          sleep 5
          if sudo systemctl is-active --quiet seolab; then
            echo "✅ Application started successfully"
            sudo systemctl status seolab --no-pager
          else
            echo "❌ Failed to start application"
            sudo journalctl -u seolab -n 50 --no-pager
            exit 1
          fi
        '
        
        rm -f private_key.pem

    - name: Deployment Status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi
